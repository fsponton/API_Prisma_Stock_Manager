generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @unique @default(autoincrement())
  full_name  String
  email      String    @unique
  role       Role      @default(EMPLOYEE)
  password   String
  resetToken String?
  active     Boolean   @default(true)
  orders     Order[] // seller orders
  product    Product[] // charged products
}

enum Role {
  ROOT
  ADMIN
  EMPLOYEE
}

model Category {
  id        Int       @id @unique @default(autoincrement())
  name      String
  available Boolean
  Product   Product[]
}

model Product {
  id             String         @id @unique @default(uuid())
  name           String
  model          String
  category       Category       @relation(fields: [id_category], references: [id])
  id_category    Int
  brand          String
  price          Float
  code           String
  available      Boolean
  description    String?
  quantity       Int
  sector         String?
  rack           String?
  square_meter   Int?
  size           Int?
  weight         Int?
  creator        User           @relation(fields: [id_creator], references: [id])
  id_creator     Int
  product_orders ProductOrder[]
}

model ProductOrder {
  id_order   String
  id_product String
  product    Product @relation(fields: [id_product], references: [id])
  order      Order   @relation(fields: [id_order], references: [id])
  quantity   Int

  @@id([id_order, id_product])
}

model Order {
  id        String         @id @unique @default(uuid())
  createdAt DateTime       @default(now())
  status    Status_Order   @relation(fields: [id_status], references: [id])
  id_status Int // status order
  client    Client         @relation(fields: [id_client], references: [id])
  id_client String
  products  ProductOrder[] // products on order
  seller    User           @relation(fields: [id_seller], references: [id])
  id_seller Int // seller user
  invoice   Invoice?
}

model Status_Order {
  id     Int     @id @unique @default(autoincrement())
  status String // pending - in progress - finished
  orders Order[]
}

model Invoice {
  id         String   @id @unique @default(uuid())
  order      Order    @relation(fields: [id_order], references: [id])
  id_order   String   @unique
  date       DateTime @default(now())
  total      Float
  clientData Client   @relation(fields: [id_client], references: [id])
  id_client  String
}

model Client {
  id            String    @id @unique @default(uuid())
  name          String
  cuit_cuil_dni String
  phone         Int
  email         String
  direccion     String
  orders        Order[]
  invoices      Invoice[]
}
